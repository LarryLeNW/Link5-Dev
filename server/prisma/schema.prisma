generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["mongoDb"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  email    String @unique
  password String

  status    String   @default("pending") 
  isVerified Boolean @default(false) 
  verificationToken String?
  verificationTokenExpiresAt DateTime?  

  Session      Session[]
  role         String        @default("User")

  profile Profile?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Profile {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  firstName  String
  lastName   String
  avatar     String?
  coverPhoto String?
  bio        String?
  birthday   DateTime?
  location   String?
  createdAt  DateTime  @default(now())
  account    Account   @relation(fields: [accountId], references: [id])
  accountId  String    @unique @db.ObjectId
  blogs      Blog[]    @relation("ProfileBlogs")
  comments   CommentBlog[] @relation("ProfileCommentBlog")
  emotions   EmotionBlog[] @relation("ProfileBlogEmotions")

  followers Follow[] @relation("UserFollowers")
  following Follow[] @relation("UserFollowing")

  sentFriendRequests     Friendship[] @relation("FriendshipSender")
  receivedFriendRequests Friendship[] @relation("FriendshipReceiver")
}

model Follow {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  followerId  String   @db.ObjectId
  followingId String   @db.ObjectId
  createdAt   DateTime @default(now())

  follower  Profile @relation("UserFollowers", fields: [followerId], references: [id], onDelete: Cascade)
  following Profile @relation("UserFollowing", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}

model Friendship {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  senderId   String   @db.ObjectId
  receiverId String   @db.ObjectId
  status     String   @default("pending")
  createdAt  DateTime @default(now())

  sender   Profile @relation("FriendshipSender", fields: [senderId], references: [id], onDelete: Cascade)
  receiver Profile @relation("FriendshipReceiver", fields: [receiverId], references: [id], onDelete: Cascade)

  @@unique([senderId, receiverId])
  @@index([senderId])
  @@index([receiverId])
}

model Session {
  token     String   @id @map("_id")
  accountId String   @db.ObjectId
  account   Account  @relation(fields: [accountId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model Product {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  image       String
  name        String
  description String
  price       Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model BlogCategory {
  id        String           @id @default(auto()) @map("_id") @db.ObjectId
  name      String           @unique
  image     String
  blogs     BlogToCategory[]
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
}

model TagBlog {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  name      String      @unique
  blogs     BlogToTag[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model BlogToCategory {
  id         String       @id @default(auto()) @map("_id") @db.ObjectId
  blogId     String       @db.ObjectId
  categoryId String       @db.ObjectId
  blog       Blog         @relation(fields: [blogId], references: [id], onDelete: Cascade)
  category   BlogCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
}

model BlogToTag {
  id     String  @id @default(auto()) @map("_id") @db.ObjectId
  blogId String  @db.ObjectId
  tagId  String  @db.ObjectId
  blog   Blog    @relation(fields: [blogId], references: [id], onDelete: Cascade)
  tag    TagBlog @relation(fields: [tagId], references: [id], onDelete: Cascade)
}

model Blog {
  id          String           @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  content     String
  description String?
  image       String?
  views       Int              @default(0)
  categories  BlogToCategory[]
  tags        BlogToTag[]
  comments    CommentBlog[]    @relation("BlogToCommentBlog")
  postById    String          @db.ObjectId
  postBy      Profile         @relation("ProfileBlogs", fields: [postById], references: [id])
  emotions    EmotionBlog[]    @relation("BlogEmotions")
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
}

model CommentBlog {
  id        String        @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  blogId    String        @db.ObjectId
  blog      Blog          @relation("BlogToCommentBlog", fields: [blogId], references: [id], onDelete: Cascade)
  postById  String        @db.ObjectId
  postBy    Profile       @relation("ProfileCommentBlog", fields: [postById], references: [id], onDelete: Cascade)
  parentId  String?       @db.ObjectId
  parent    CommentBlog?  @relation("CommentBlogReplies", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies   CommentBlog[] @relation("CommentBlogReplies")
  emotions  EmotionBlog[] @relation("CommentBlogEmotions")
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

model EmotionBlog {
  id        String       @id @default(auto()) @map("_id") @db.ObjectId
  type      String
  blogId    String?      @db.ObjectId
  blog      Blog?        @relation("BlogEmotions", fields: [blogId], references: [id], onDelete: Cascade)
  commentId String?      @db.ObjectId
  comment   CommentBlog? @relation("CommentBlogEmotions", fields: [commentId], references: [id], onDelete: Cascade)
  postById  String       @db.ObjectId
  postBy    Profile      @relation("ProfileBlogEmotions", fields: [postById], references: [id], onDelete: Cascade)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  @@unique([blogId, postById])
}
